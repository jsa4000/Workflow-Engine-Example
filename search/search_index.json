{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Workflow Engine","text":"","tags":["Workflow Engine"]},{"location":"#workflow-engine","title":"Workflow Engine","text":"","tags":["Workflow Engine"]},{"location":"#introduction","title":"Introduction","text":"","tags":["Workflow Engine"]},{"location":"getting-started/installation/","title":"Installation","text":"<p>This section describe how to install and run the basic components and tools to start developing using Camunda Workflow Engine.</p>","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/installation/#create-project","title":"Create Project","text":"<p>In order to create a camunda project, there are several options to choose from. The simplest options are by using initializers that creates java projects with the main dependencies and configuration.</p>","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/installation/#spring-initializer","title":"Spring Initializer","text":"<p>Spring Initializr provides an extensible API to generate JVM-based projects with implementations for several common components and dependencies.</p> <p>Note</p> <p>The recommendation is to use spring initializer as a base for the project and start adding Camunda dependencies on top. The parent will inherit the common plugins and dependencies in Spring Boot ecosystem. </p> <p></p> <p>Finally add following dependencies into <code>pom.xml</code> file.</p> <p>Note</p> <p>Use the proper <code>camunda.version</code> to your needs. The current version at this moment is <code>7.22.0</code>.</p> <pre><code>    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.camunda.bpm&lt;/groupId&gt;\n                &lt;artifactId&gt;camunda-bom&lt;/artifactId&gt;\n                &lt;version&gt;${camunda.version}&lt;/version&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n</code></pre> <pre><code>  &lt;dependencies&gt;\n    &lt;!-- Camunda dependencies --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.camunda.bpm.springboot&lt;/groupId&gt;\n        &lt;artifactId&gt;camunda-bpm-spring-boot-starter-rest&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.camunda.bpm.springboot&lt;/groupId&gt;\n        &lt;artifactId&gt;camunda-bpm-spring-boot-starter-webapp&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.camunda.bpm&lt;/groupId&gt;\n        &lt;artifactId&gt;camunda-engine-plugin-spin&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.camunda.spin&lt;/groupId&gt;\n        &lt;artifactId&gt;camunda-spin-dataformat-all&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n  &lt;dependencies&gt;\n</code></pre>","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/installation/#camunda-initializer","title":"Camunda Initializer","text":"<p>Go to camunda initializer website, that allows you to create a Spring Boot application with the main dependencies and configuration to start working with Camunda very quickly.</p> <p></p> <p>The description of the modules are:</p> <ul> <li>REST API: The goal of the REST API is to expose and provide access to all relevant interfaces of the engine.</li> <li>WebApps (Cockpit): It provides access to deployed BPMN processes and DMN decisions, allows searching though running and ended instances and performing operations on these.</li> <li>Spin (XML &amp; JSON): Camunda Spin is a library for simple XML and JSON processing on the JVM (Java Virtual Machine), targeting Java and JVM-based scripting languages such as Groovy, JRuby, Jython, JavaScript and Java Expression Language. It provides a comprehensible fluent API for working with different data formats through lightweight wrapper objects.</li> </ul>","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/installation/#configuration","title":"Configuration","text":"<p>Add the configuration needed to run Camunda Engine into <code>src/main/resources/application.yaml</code>.</p>","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/installation/#database-configuration","title":"Database Configuration","text":"<pre><code>spring:\n  application:\n    name: workflow-engine\n  datasource:\n    url: jdbc:h2:mem:db\n    username: sa\n    password: password\n    driverClassName: org.h2.Driver\n</code></pre>","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/installation/#camunda-configuration","title":"Camunda Configuration","text":"<p>You can see all Camunda configuration in the official documentation.</p> <pre><code>camunda:\n  bpm:\n    deployment-resource-pattern: classpath:workflows/**/*.bpmn,classpath:workflows/**/*.dmn,classpath:workflows/**/*.form\n    filter:\n      # Create a default filter to see all tasks in task list\n      create: All tasks\n    authorization:\n      # Block users from other groups from claiming the task not assigned to it.\n      enabled: true\n    # https://docs.camunda.org/manual/latest/user-guide/spring-boot-integration/configuration/#generic-properties\n    generic-properties:\n      properties:\n        # Each execution of a model resource (BPMN, DMN, and CMMN) generates historic data during execution\n        # that is stored in the database. In Camunda 7, history cleanup removes this historic data from the\n        # database based on a defined history time to live (HTTL).\n        # https://docs.camunda.io/docs/components/modeler/reference/modeling-guidance/rules/history-time-to-live/\n        historyTimeToLive: P30D\n        # Expression evaluation is enabled for any query. Use this setting if all users are trusted.\n        enableExpressionsInAdhocQueries: true\n        enableExpressionsInStoredQueries: true\n        # Set Process order policy for Job Execution\n        jobExecutorAcquireByDueDate: true\n        # jobExecutorAcquireByPriority: true\n    job-execution:\n      core-pool-size: 3\n      max-pool-size: 10\n      queue-capacity: 3\n      max-jobs-per-acquisition: 3\n    admin-user:\n      id: admin\n      password: password\n</code></pre>","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/installation/#workflows","title":"Workflows","text":"<p>Finally add the following BPMN file into <code>src/main/resources/workflow</code> with a simple task called <code>Process Simple</code>.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;bpmn:definitions xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:camunda=\"http://camunda.org/schema/1.0/bpmn\" id=\"Definitions_0fr9mxs\" targetNamespace=\"http://bpmn.io/schema/bpmn\" exporter=\"Camunda Modeler\" exporterVersion=\"5.28.0\"&gt;\n  &lt;bpmn:process id=\"process-simple\" name=\"Process Simple\" isExecutable=\"true\" camunda:historyTimeToLive=\"180\"&gt;\n    &lt;bpmn:startEvent id=\"StartEvent_1\"&gt;\n      &lt;bpmn:outgoing&gt;SequenceFlow_1fp17al&lt;/bpmn:outgoing&gt;\n    &lt;/bpmn:startEvent&gt;\n    &lt;bpmn:sequenceFlow id=\"SequenceFlow_1fp17al\" sourceRef=\"StartEvent_1\" targetRef=\"say-hello\" /&gt;\n    &lt;bpmn:endEvent id=\"EndEvent_0x6ir2l\"&gt;\n      &lt;bpmn:incoming&gt;SequenceFlow_16gzt2m&lt;/bpmn:incoming&gt;\n    &lt;/bpmn:endEvent&gt;\n    &lt;bpmn:sequenceFlow id=\"SequenceFlow_16gzt2m\" sourceRef=\"say-hello\" targetRef=\"EndEvent_0x6ir2l\" /&gt;\n    &lt;bpmn:userTask id=\"say-hello\" name=\"Say hello to&amp;#10;demo\" camunda:candidateUsers=\"demo\"&gt;\n      &lt;bpmn:incoming&gt;SequenceFlow_1fp17al&lt;/bpmn:incoming&gt;\n      &lt;bpmn:outgoing&gt;SequenceFlow_16gzt2m&lt;/bpmn:outgoing&gt;\n    &lt;/bpmn:userTask&gt;\n  &lt;/bpmn:process&gt;\n  &lt;bpmndi:BPMNDiagram id=\"BPMNDiagram_1\"&gt;\n    &lt;bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"process-simple\"&gt;\n      &lt;bpmndi:BPMNShape id=\"_BPMNShape_StartEvent_2\" bpmnElement=\"StartEvent_1\"&gt;\n        &lt;dc:Bounds x=\"179\" y=\"99\" width=\"36\" height=\"36\" /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"EndEvent_0x6ir2l_di\" bpmnElement=\"EndEvent_0x6ir2l\"&gt;\n        &lt;dc:Bounds x=\"432\" y=\"99\" width=\"36\" height=\"36\" /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"UserTask_08mft2c_di\" bpmnElement=\"say-hello\"&gt;\n        &lt;dc:Bounds x=\"270\" y=\"77\" width=\"100\" height=\"80\" /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNEdge id=\"SequenceFlow_1fp17al_di\" bpmnElement=\"SequenceFlow_1fp17al\"&gt;\n        &lt;di:waypoint x=\"215\" y=\"117\" /&gt;\n        &lt;di:waypoint x=\"270\" y=\"117\" /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"SequenceFlow_16gzt2m_di\" bpmnElement=\"SequenceFlow_16gzt2m\"&gt;\n        &lt;di:waypoint x=\"370\" y=\"117\" /&gt;\n        &lt;di:waypoint x=\"432\" y=\"117\" /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n    &lt;/bpmndi:BPMNPlane&gt;\n  &lt;/bpmndi:BPMNDiagram&gt;\n&lt;/bpmn:definitions&gt;\n</code></pre> <p>The diagram of previous BPMN process is the following.</p> <p></p>","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/installation/#modeler","title":"Modeler","text":"<p>Camunda Modeler is an integrated modeling solution for BPMN, DMN, and Forms based on bpmn.io.</p> <p></p> <p>You can download the Open Source Desktop Modeler from this url, by selecting the proper O.S.</p> <p>Warning</p> <p>You would need to select the proper version of Camunda to start designing the BPMN or DMN models. </p> <p></p>","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/installation/#webapps","title":"WebApps","text":"<p>Run the application and go to Camunda WebApps at http://localhost:8080</p> <p></p> <p>For specific webapp use following links:</p> <ul> <li>Cockpit Dashboard</li> <li>TaskList Dashboard</li> </ul>","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/installation/#tasklist","title":"Tasklist","text":"<p>To manually start a process go to TaskList Dashboard.</p> <p>Click to Start process button on the top-right corner of the screen.</p> <p></p> <p>Select the workflow (<code>Process Simple</code>) to be started among the deployed ones.</p> <p></p> <p>Set a Business Key to identify the process and finally click Start.</p> <p></p> <p>This will start a process instance. Since it's a simple process with an User Task, this will be listed in the tasklist, so press <code>F12</code> or reload the page to refresh the current webpage. You cannot complete it until the task will be assigned to an user or claimed.</p> <p></p> <p>Once you (claim) or somebody else have been assigned to the task, it can be completed.</p> <p></p>","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/installation/#cockpit","title":"Cockpit","text":"<p>Cockpit gives you a real-time view of BPMN processes and DMN decision tables as they run, so you can monitor their status and quickly identify technical incidents that slow down or stop workflows.</p> <p>Note</p> <p>Cockpit will only show the current process instances being running, for the historical processes you must upgrade to the Enterprise Camunda version.</p> <p>From the previous example, the process is still running and the User Task is still pending to be completed. You can visualize this information within the cockpit.</p> <p></p> <p>In the Running Process Instances options, you can see the definition version, definition key and name, history time to live (HTTL), process instances (Current Step, start time, Business Key), incidents, job definitions.</p> <p></p> <p>In process instances you can take a look closer to the process running, variables, user tasks, etc..</p> <p></p> <p>In the Open Human Tasks options, you can visualize a resume for all assignments by type and group for all processes.</p> <p></p>","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/installation/#ide","title":"IDE","text":"","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/installation/#intellij","title":"IntelliJ","text":"","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/installation/#enable-auto-save","title":"Enable Auto-save","text":"<p>Enable following auto-save options within IntelliJ, to enable auto-formatting and removing unused dependencies when saving.</p> <p></p>","tags":["Workflow Engine","BPMN","Camunda"]},{"location":"getting-started/workflow-example/","title":"Example","text":"","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-example/#policy-process","title":"Policy Process","text":"","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-example/#bpmn","title":"BPMN","text":"<p>Business Process Model and Notation (BPMN 2.0) was developed as a graphical notation to represent complex processes and address these challenges. The visual nature of BPMN enables greater collaboration between different teams.</p> <p>The policy process is a more complex BPMN process that consist on several User Tasks, Script Tasks, Call Activity (subprocess) and multiple Gateways and boundary events.</p> <p></p> ProcessUser TaskDMNSequence FlowProcess SequenceCall ActivityError EventNotificationEscalationReminderCancel EventConfirmation <p></p> <p>In the Process tab you have to configure the Name and ID of the process.</p> <p>Note</p> <p>You must select in an empty area of the Camunda Modeler to get the process properties.</p> <p>This process can be used as standalone or invoked by other processes as Call Activity (subprocess). In this case this is the main process, so other processes will be executed from this one. </p> <p>Another important configuration if the Historical Time to live (HTTL), the Candidate starter groups and Candidate starter users that will be able to interact with this process.</p> <p></p> <p>User Tasks are tasks that need user interaction to be able to continue with the process. When an user task is completed, the task may need additional variables to be submitted into the flow (<code>Forms</code>). These variables can be used for following tasks to perform automatic tasks such as validations, data persist operations or be used by conditionals based on gateways or rule engines (DMN).</p> <p>User tasks allows to configure the assignments based on following properties:</p> <ul> <li>Assignee: the user that must complete the tasks</li> <li>Candidate groups: Comma separated values with the groups or profiles allowed to claim the task.</li> <li>Candidate users: Comma separated values with the users allowed to claim the task.</li> <li>Due date: Due date to complete the task, otherwise the task will be cancelled.</li> </ul> <p>In order to get variables to be submitted into the process, Camunda allow to configure <code>Forms</code> directly into the tasks.</p> <ul> <li>Type: Type of Form supported by Camunda: <code>Camunda Forms</code>, <code>Embedded or External Tasks Forms</code> or <code>Generated Task Forms</code>.</li> <li>Form reference: the form identifier (<code>ID</code>) used when creating the <code>Camunda Form</code>.</li> <li>Binding: The version of the form used: <code>deployment</code>, <code>latest</code>, <code>version</code>.</li> </ul> <p></p> <p>The Business Rule Task allow to set a business logic (<code>conditions</code>) to generate results (<code>outputs</code>) based on variables (<code>inputs</code>) from the current process.</p> <ul> <li>Type: Types of implementations that can be used: DMN, External, Java Class, Expression, etc.. </li> <li>Decision reference: In the case of using DMN, the decision table to be used to compute the business rules.</li> <li>binding: The version of the form used: <code>deployment</code>, <code>latest</code>, <code>version</code>, <code>versionTag</code>.</li> <li>Result variable: The name of the variable with the result (<code>output</code>).</li> <li>Map decision result: Depending on the result to return or the <code>Hit Policy</code> using DMN, it can return multiple occurrences. For that Camunda allow the following types:  <code>singleResult (Map&lt;String,Object&gt;)</code>, <code>resultList (List&lt;Map&lt;String,Object&gt;&gt;)</code>, <code>singleEntry (TypedValue)</code>, <code>collectEntries (List&lt;Object&gt;)</code>.</li> </ul> <p></p> <p>By using conditional gateways (Exclusive Gateway), you can control the sequence depending on conditions. Those conditions are computed by the Sequence Flow, that are the arrows that are connected to the conditional gateway.</p> <p>In order to set the condition, you must configure following properties:</p> <ul> <li>Type: You can choose between <code>Script</code> or <code>Expression</code> to specify the condition.</li> <li>Condition Expression: In the case of using <code>Script</code>, you can use following script to check for a particular condition: <code>${result.risk == \"HIGH\"}</code></li> </ul> <p></p> <p>This is an automatic task that support scripting. There are several scripting languages supported by Camunda. You would need to add dependencies to support various languages into the Camunda project.</p> <p>In order to support groovy scripting language to will need to add following dependency into <code>pom.xml</code> file.</p> <pre><code>  &lt;dependency&gt;\n      &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;\n      &lt;artifactId&gt;groovy-jsr223&lt;/artifactId&gt;\n      &lt;version&gt;${groovy-jsr.version}&lt;/version&gt;\n      &lt;scope&gt;compile&lt;/scope&gt;\n  &lt;/dependency&gt;\n</code></pre> <p>In order to properly configure a Script Task you will need to select:</p> <ul> <li>Format: The format of your scripting language: <code>groovy</code>, <code>javascript</code>, <code>python</code>, etc..</li> <li>Type: There are two options <code>Inline script</code> or <code>External Resource</code></li> <li>Script/External Resource: Depending on the <code>Type</code> selected you must put down your script or reference an external file.</li> </ul> <p>Following groovy script will extract the variable <code>result</code> generated by the Business Rule Task (DMN) and print a message into the console, with the <code>risk</code> attribute.</p> <pre><code>var result = execution.getVariable(\"result\");\nprintln \"Compute Policy \" + result.risk + \" risk\"\n</code></pre> <p></p> <p>Call Activity allows to call a subprocess modeled into a different file. This allows to share processes instead creating embedded subprocesses in the same file.</p> <p>In order to properly configure a <code>Call Activity</code>, you must set following properties into <code>Called Element</code>:</p> <ul> <li>Type: Call activity could be either <code>BPMN</code> or <code>CMMN</code> subprocess.</li> <li>Called element: The reference of the called element or subprocess <code>ID</code>.</li> <li>Binding: The version of the form used: <code>deployment</code>, <code>latest</code>, <code>version</code>, <code>versionTag</code>.</li> <li>Business Key: Allow to propagate the same <code>Business Key</code> to the subprocess being called.</li> </ul> <p>In order the subprocess and parent share the same variables ensure to check following properties.</p> <ul> <li><code>Propagate all variables</code> in <code>In Mapping Propagation</code></li> <li><code>Propagate all variables</code> in <code>Out Mapping Propagation</code></li> </ul> <p></p> <p>Boundary events provide a way to model what should happen if an event occurs while an activity is still active.</p> <p>A boundary event must be an intermediate catch event, and can be either interrupting or non-interrupting. Interrupting means that once triggered, before taking any outgoing sequence flow the activity the event is attached to is terminated. This allows modeling timeouts where we can prune certain execution paths if something happens (e.g. the process takes too long).</p> <p>You can add as many as needed Boundary events to a Task (Service Task, User Task, Script Task, etc..).</p> <p>There are multiple options supported in BPMN like Message Events, Signal Events, Timer Events, Error Events, Escalation Events, etc..</p> <p>In BPMN, errors define possible errors that can occur. Error events are elements in the process referring to defined errors. An error can be referenced by one or more error events. An error must define an <code>errorCode</code>. The value of this <code>errorCode</code> is used to determine which catch event can catch the thrown error.</p> <p>Note</p> <p>In the example this Error Boundary Event will catch any error thrown by the Child Task (subprocess), so it won't take into consideration the <code>errorCode</code> of the exception so it catches all thrown errors.</p> <p></p> <p>This is a Script Task that only print an output log into the console.</p> <pre><code>println \"Approval is pending to confirm\"\n</code></pre> <p></p> <p>Timer Boundary Event can be either interrupting or non-interrupting, in this case it is Interrupting. Interrupting means once is triggered the flow changes breaking the normal flow. The non-interrupting boundary events has dotted lines and the interrupting not.</p> <p>In order to properly configure Timer Boundary Event you will need to set following properties:</p> <ul> <li>Type: You can select between three different types: <code>Date</code>, <code>Duration</code> and <code>Cycle</code>.</li> <li>Value: The time value depending on the type. For the duration and date it uses ISO 8601 time format (i. <code>PT5S</code>, <code>R/PT3S</code>)</li> </ul> <p></p> <p>Timer Boundary Event can be either interrupting or non-interrupting, in this case it is non-interrupting. Non-interrupting means once is triggered the flow does not change the normal flow, instead it will run in parallel the secondary flow while it's waiting for the main task to be completed. The non-interrupting boundary events has dotted lines and the interrupting not.</p> <p>In order to properly configure Timer Boundary Event you will need to set following properties:</p> <ul> <li>Type: You can select between three different types: <code>Date</code>, <code>Duration</code> and <code>Cycle</code>.</li> <li>Value: The time value depending on the type. For the duration and date it uses ISO 8601 time format (i. <code>PT5S</code>, <code>R/PT3S</code>)</li> </ul> <p></p> <p>Message Boundary Event can be either interrupting or non-interrupting, in this case it is Interrupting. Interrupting means once is triggered the flow changes breaking the normal flow. The non-interrupting boundary events has dotted lines and the interrupting not.</p> <p>In order to properly configure Message Boundary Event you will need to set following properties for the Message:</p> <ul> <li>Global Message reference: the message reference to be subscribed on. If the event does not exist it must be created.</li> <li>Name: The name of the message event.</li> </ul> <p>Once Boundary Event receives a message using that message <code>name</code> and the <code>Business Key</code>, it will be triggered so the normal flow will break.</p> <p></p> <p>This is a Script Task that checks if <code>approved</code> is <code>true</code> to confirm the policy.</p> <p>This is the script to be evaluated.</p> <pre><code>if(approved==true){\n  println \"An email has been sent to the user to confirm the policy.\";\n} else {\n  println \"An email has been sent to the user to deny the policy.\";\n}\n</code></pre>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-example/#forms","title":"Forms","text":"<p>Forms can be modeled using Camunda Modeler. You can add as many elements to the form and binding to variables that will be submitted to the process when the task is completed.</p> <p>Warning</p> <p>Using Camunda Forms may not fit with the web framework or styles you are currently using. Because of that, you should create your own forms and bind them to the tasks by using proper identifiers.</p> <p></p>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-example/#dmn","title":"DMN","text":"<p>DMN stands for Decision Model and Notation. It is a standard administered by the Object Management Group (OMG) and has been widely adopted across various industries. Businesses leverage DMN to design decision models that are used for automation of the decision-making processes. DMN serves as a common language to align business and IT on repeatable business rules and decision management. The notation enhances business efficiency, reduces the risk of human error, and ensures that decision models are interchangeable across the organization.</p> <p>Core elements of DMN include:</p> <ul> <li>Decision tables: Simple and intuitive representation of decisions consisting of input, condition, and output.</li> <li>Friendly Enough Expression Language (FEEL): Used to express conditions in the decision tables so they can be executed.</li> <li>Decision Requirements Diagrams (DRD): Created when a decision can not be described in just one simple table. For example, when there are dependencies between intermediate decisions output from which serve as an input for the final decision to be made.</li> </ul> <p>The example process dmn consist in one decision table and two inputs, there is no additional DRD or functions.</p> <p></p> Decision TableInputs <p></p> <p>A decision table represents decision logic which can be depicted as a table in DMN. It consists of inputs, outputs and rules. Decision Tables can be chained by creating a Decision Requirements Diagrams (DRD)</p> <p></p> <p>In the configuration tab Name and ID must be specified for the DMN.</p> <p> </p> <p>Inputs must be named in the same way as the variables from the process (i.e <code>type</code>, <code>age</code>).</p> <p>Later these inputs can be referenced in the Decision Table as an Expressions. This way it makes more explicit the inputs used for each Decision Table from the DMN</p> <p>A decision table consists of several rules, typically represented as rows. When reading such a row, we look at certain input values and deduct a certain result represented by output values.</p> <p>Hit policies describe different ways (standardized by DMN) to evaluate the rules contained in a decision table. Different hit policies do not only lead to different results, but typically also require different modes of thinking and reason about the meaning of the entire table. For example, When using the simplest hit policy \"unique\" or \"first\", such rules do not overlap: only a single rule must match.</p> <p></p> InputsEditOutputs <p> </p> <p>Depending if you are defining de inputs in the DRD, you can use an Expression or use Input Variable instead.</p> <p></p> <p>So, if you already have an input data named <code>type</code> you can use the same value for the expression. However if you don't have defined any input data to your ** , then you must use Input Variable** with the variable <code>type</code>.</p> <p>Note</p> <p>It's best practice to use inputs from expressions rather than row inputs, since you can watch all inputs be seeing the DRD.</p> <p>Using <code>string</code> types you can define predefined values (aka enumerations) in order to restrict possible values to choose from.</p> <p> </p> <p>Depending on  you input types you can select the condition to evaluate (<code>Match one</code>, <code>Comparison</code>) and the values to compare with (<code>CAR</code>,<code>&lt; 30</code>). </p> <p></p> <p>For the out put you must decide the type of the output and the value for each row. </p> <p>You can have multiple outputs returned in the final result.</p> <p>The final result from the DMN will be used by flow and for the validation process with the following <code>json</code> format.</p> <pre><code>{\n  \"result\": true,\n  \"risk\": \"MID\"\n}\n</code></pre>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-example/#validation-process","title":"Validation Process","text":"<p>The validation process consist in one automatic task (<code>Script Task</code>) that checks whether the result from previous operation was successful. Otherwise, it will throw an exception that terminates the subprocess with an error. This error will be caught by the parent process in order to perform an action.</p> <p>Following is the structure of the result from the DMN Task</p> <pre><code>{\n  \"result\": true,\n  \"risk\": \"MID\"\n}\n</code></pre> <p>The BPMN model of the validation process is the following.</p> <p>Note</p> <p>The process bellow have a Debug User Task so it will be easier to debug and watch variables, since it will stop the flow at that stage. You will need to remove it at the end.</p> <p></p> ProcessValidate TaskError BoundaryValidation ErrorError Event <p></p> <p>In the Process tab you have to configure the Name and ID of the process.</p> <p>Note</p> <p>You must select in an empty area of the Camunda Modeler to get the process properties.</p> <p>This process can be used as standalone or invoked by other processes as Call Activity (subprocess). In this case the ID of the process will be used to be referenced from other processes. </p> <p>Another important configuration if the Historical Time to live (HTTL), the Candidate starter groups and Candidate starter users that will be able to interact with this process.</p> <p></p> <p>This is an automatic task that support scripting. There are several scripting languages supported by Camunda. You would need to add dependencies to support various languages into the Camunda project.</p> <p>In order to support groovy scripting language to will need to add following dependency into <code>pom.xml</code> file.</p> <pre><code>  &lt;dependency&gt;\n      &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;\n      &lt;artifactId&gt;groovy-jsr223&lt;/artifactId&gt;\n      &lt;version&gt;${groovy-jsr.version}&lt;/version&gt;\n      &lt;scope&gt;compile&lt;/scope&gt;\n  &lt;/dependency&gt;\n</code></pre> <p>In order to properly configure a Script Task you will need to select:</p> <ul> <li>Format: The format of your scripting language: <code>groovy</code>, <code>javascript</code>, <code>python</code>, etc..</li> <li>Type: There are two options <code>Inline script</code> or <code>External Resource</code></li> <li>Script/External Resource: Depending on the <code>Type</code> selected you must put down your script or reference an external file.</li> </ul> <p>Following groovy script will throw an exception if the result from a process variable (input of the process) is <code>false</code>.</p> <pre><code>var result = execution.getVariable(\"result\");\nprintln result;\nif(result.result==false){\n  throw new org.camunda.bpm.engine.delegate.BpmnError(\"validationError\");\n}\n</code></pre> <p>The exception will trigger the Error Boundary, so it will exit the normal path of the flow.</p> <p></p> <p>Boundary events provide a way to model what should happen if an event occurs while an activity is still active.</p> <p>A boundary event must be an intermediate catch event, and can be either interrupting or non-interrupting. Interrupting means that once triggered, before taking any outgoing sequence flow the activity the event is attached to is terminated. This allows modeling timeouts where we can prune certain execution paths if something happens (e.g. the process takes too long).</p> <p>You can add as many as needed Boundary events to a Task (Service Task, User Task, Script Task, etc..).</p> <p>There are multiple options supported in BPMN like Message Events, Signal Events, Timer Events, Error Events, Escalation Events, etc..</p> <p>In BPMN, errors define possible errors that can occur. Error events are elements in the process referring to defined errors. An error can be referenced by one or more error events.</p> <p>An error must define an <code>errorCode</code>. The value of this <code>errorCode</code> is used to determine which catch event can catch the thrown error.</p> <p>For error throw events, it is possible to define the <code>errorCode</code> as an expression or a static value. If an <code>errorCode</code> expression is configured then it will be evaluated once the event is reached, and used to throw error.</p> <p>For error catch events <code>errorCode</code> must be a static value. Alternatively an error catch event may omit the error reference all together. In this case it catches all thrown errors.</p> <p>Note</p> <p>In the example this Error Boundary Event will catch any error thrown by the Task, so it won't take into consideration the <code>errorCode</code> of the exception so it catches all thrown errors.</p> <p> </p> <p>This is a Script Task will only prints an output log into the console.</p> <pre><code>println \"The Policy has been cancelled\"\n</code></pre> <p>You can also get the error code or message thrown by previous error boundary event.</p> <p></p> <p>In a process you can define End Events that will be used later by the parent process and caught by the corresponding Boundary Events. Similar when an exception is thrown by the system or a task, you can throw a typed exception at the end of the process using Error End Events.</p> <p>Following an example of a Call Activity that will catch an exception from a subprocess and react accordingly.</p> <p></p> <p>The common parameters to be configured using Error End Event are:</p> <ul> <li>Global error reference: The reference of the error to be thrown. You can create a new one if it does not exist.</li> <li>Name: The <code>name</code> of the error.</li> <li>Code: The <code>errorCode</code> of the exception to be caught by a Boundary Event</li> <li>Message: Message of the exception to be thrown.</li> </ul>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/","title":"Run","text":"","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#webapps","title":"Webapps","text":"<p>In order to run the Process DMN, you can go Tasklist and Start Process. Then select the process to execute.</p> <p></p> <p>Then set the Business Key for the process instance to be created.</p> <p>Note</p> <p>Business Key will be useful later to gather information about this instance and using other functionality such as sending messages. Instead of storing the internal identifier generated by Camunda (<code>UUID</code>) you can set a external identifier.</p> <p></p> <p>Refresh the page <code>F12</code> in order to get all pending tasks. Select the Purchase Policy task  and press claim to assign the task to yourself. Fill all the values and finally press complete.</p> <p></p> <p>Go to Cockpit and select the Process DMN deployment and the current process instance to get process information and insights. From this dashboard you can get the current state of the process: watch all variables, current task and additional information.</p> <p>Enterprise Feature</p> <p>Historical data is only included in the enterprise edition of Camunda 7, it is not available in the community edition.</p> <p></p> <p>Go to Decisions, then select the Decision Table used by this process (<code>Risk</code>) and select the current process instance being running. In this dashboard you can see the decision made by the DMN highlighted.</p> <p></p> <p>Finally, go to the Tasklist and complete the Escalate Approval task.</p> <p></p> <p>In Camunda console you must see following logs by using the default values in the forms. Different values will follow different paths in the flow that means different tasks and operations are performed.</p> <pre><code>Compute Policy MID risk\n[result:true, risk:MID]\nAn email has been sent to the user to deny the policy.\n</code></pre>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#api-rest","title":"API Rest","text":"","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#admin","title":"Admin","text":"","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#get-all-users","title":"Get All Users","text":"<p>Request</p> <pre><code># Get all users. You can filter users by firstName, email, emailLike, id, etc..\ncurl --location 'http://localhost:8080/engine-rest/user' \\\n--header 'Accept: application/json' \\\n| jq .\n</code></pre> <p>Response</p> <pre><code>[\n    {\n        \"id\": \"admin\", // (1)!\n        \"firstName\": \"Admin\",\n        \"lastName\": \"Admin\",\n        \"email\": \"admin@localhost\"\n    }\n]\n</code></pre> <ol> <li>User identifier to be used in operations such as claim task</li> </ol>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#process","title":"Process","text":"","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#get-all-process-definitions","title":"Get All Process Definitions","text":"<p>Request</p> <pre><code># Get all process definitions. You can filter processes by active, process key, etc..\ncurl --location 'http://localhost:8080/engine-rest/process-definition' \\\n--header 'Accept: application/json' \\\n| jq .\n</code></pre> <p>Response</p> <pre><code>[\n  {\n    \"id\": \"process-dmn:1:8b5fb8a9-a126-11ef-b98f-36542ecc2075\",\n    \"key\": \"process-dmn\", // (1)!\n    \"category\": \"http://bpmn.io/schema/bpmn\",\n    \"description\": null,\n    \"name\": \"Process DMN\", // (2)!\n    \"version\": 1, // (3)!\n    \"resource\": \"/Users/jsantosa/Projects/Github/Workflow-Engine-Example/src/workflow-engine/target/classes/workflows/examples/bpmn/process-dmn.bpmn\",\n    \"deploymentId\": \"8b4ea1a0-a126-11ef-b98f-36542ecc2075\",\n    \"diagram\": null,\n    \"suspended\": false,\n    \"tenantId\": null,\n    \"versionTag\": null,\n    \"historyTimeToLive\": 180,\n    \"startableInTasklist\": true\n  },\n  // more process definitions.\n]\n</code></pre> <ol> <li>The Process key that will be used to create a new Process instance.</li> <li>The Name of the process.</li> <li>The latest version of the process deployed.</li> </ol>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#start-process-instance","title":"Start Process Instance","text":"<p>Request</p> <pre><code># Start Process Instance. You can also send variables and other information to the process at start.\nPROCESS_KEY=process-dmn\nBUSINESS_KEY=1234\ncurl --location \"http://localhost:8080/engine-rest/process-definition/key/$PROCESS_KEY/start\" \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"businessKey\": \"'\"$BUSINESS_KEY\"'\"\n}' \\\n| jq .\n</code></pre> <p>Response</p> <pre><code>{\n  \"links\": [\n    {\n      \"method\": \"GET\",\n      \"href\": \"http://localhost:8080/engine-rest/process-instance/4031e4b2-a128-11ef-b98f-36542ecc2075\",\n      \"rel\": \"self\"\n    }\n  ],\n  \"id\": \"4031e4b2-a128-11ef-b98f-36542ecc2075\", // (1)!\n  \"definitionId\": \"process-dmn:1:8b5fb8a9-a126-11ef-b98f-36542ecc2075\",\n  \"businessKey\": \"1234\", // (2)!\n  \"caseInstanceId\": null,\n  \"ended\": false,\n  \"suspended\": false,\n  \"tenantId\": null\n}\n</code></pre> <ol> <li>The internal identifier generated for the current process instance.</li> <li>The external identifier of the process.</li> </ol>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#get-all-process-instances","title":"Get All Process Instances","text":"<p>Request</p> <pre><code># Get all process instances. You can filter processes by processKey, definitionIDd, etc..\nPROCESS_KEY=process-dmn\ncurl --location 'http://localhost:8080/engine-rest/process-instance?firstResult=0&amp;maxResults=50' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"processDefinitionKey\": \"'\"$PROCESS_KEY\"'\"\n}' \\\n| jq .\n</code></pre> <p>Response</p> <pre><code>[\n  {\n    \"links\": [],\n    \"id\": \"3f299e33-a137-11ef-b98f-36542ecc2075\", // (1)!\n    \"definitionId\": \"process-dmn:1:8b5fb8a9-a126-11ef-b98f-36542ecc2075\",\n    \"businessKey\": \"1234\", // (2)!\n    \"caseInstanceId\": null,\n    \"ended\": false,\n    \"suspended\": false,\n    \"tenantId\": null\n  },\n // more process instances.\n]\n</code></pre> <ol> <li>The internal process instance identifier.</li> <li>The BusinessKey of the process.</li> </ol>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#task","title":"Task","text":"","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#get-all-tasks","title":"Get All Tasks","text":"<p>Request</p> <pre><code># Get all tasks. You can filter processed by candidate groups, candidate users, business key, etc..\ncurl --location 'http://localhost:8080/engine-rest/task?firstResult=0&amp;maxResults=50' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"active\": \"true\"\n}' \\\n| jq .\n</code></pre> <p>Response</p> <pre><code>[\n    {\n        \"id\": \"4033e085-a128-11ef-b98f-36542ecc2075\", // (1)!\n        \"name\": \"Purchase Policy\", // (2)!\n        \"assignee\": null, // (3)!\n        \"created\": \"2024-11-12T19:59:31.968+0100\",\n        \"due\": null,\n        \"followUp\": null,\n        \"lastUpdated\": null,\n        \"delegationState\": null,\n        \"description\": null,\n        \"executionId\": \"4031e4b2-a128-11ef-b98f-36542ecc2075\",\n        \"owner\": null,\n        \"parentTaskId\": null,\n        \"priority\": 50,\n        \"processDefinitionId\": \"process-dmn:1:8b5fb8a9-a126-11ef-b98f-36542ecc2075\",\n        \"processInstanceId\": \"4031e4b2-a128-11ef-b98f-36542ecc2075\",\n        \"taskDefinitionKey\": \"purchase-policy\", // (4)!\n        \"caseExecutionId\": null,\n        \"caseInstanceId\": null,\n        \"caseDefinitionId\": null,\n        \"suspended\": false,\n        \"formKey\": null,\n        \"camundaFormRef\": { // (5)!\n            \"key\": \"purchase-policy\",\n            \"binding\": \"latest\",\n            \"version\": null\n        },\n        \"tenantId\": null,\n        \"taskState\": \"Created\"\n    }\n]\n</code></pre> <ol> <li>The internal identifier of the task.</li> <li>The Name of the task.</li> <li>The current assignee.</li> <li>The task definition key used in BPMN.</li> <li>The form attached to this task.</li> </ol>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#claim-task","title":"Claim Task","text":"<p>Note</p> <p>It's not necessary to claim a task before its completion.</p> <p>Request</p> <pre><code># Claim Task. You will need to know the task id and the user id.\nTASK_ID=3f29c546-a137-11ef-b98f-36542ecc2075\nUSER_ID=admin\ncurl --location \"http://localhost:8080/engine-rest/task/$TASK_ID/claim\" \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"userId\": \"'\"$USER_ID\"'\"\n}' \\\n| jq .\n</code></pre> <p>Response</p> <p>N/A</p>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#get-task-by-id","title":"Get Task by Id","text":"<p>Request</p> <pre><code># Get task by id. You can filter processed by candidate groups, candidate users, business key, etc..\nTASK_ID=3f29c546-a137-11ef-b98f-36542ecc2075\ncurl --location 'http://localhost:8080/engine-rest/task?firstResult=0&amp;maxResults=50' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"taskId\": \"'\"$TASK_ID\"'\"\n}' \\\n| jq .\n</code></pre> <p>Response</p> <pre><code>[\n  {\n    \"id\": \"4033e085-a128-11ef-b98f-36542ecc2075\",\n    \"name\": \"Purchase Policy\",\n    \"assignee\": \"admin\", // (1)!\n    \"created\": \"2024-11-12T19:59:31.968+0100\",\n    \"due\": null,\n    \"followUp\": null,\n    \"lastUpdated\": \"2024-11-12T21:10:26.298+0100\",\n    \"delegationState\": null,\n    \"description\": null,\n    \"executionId\": \"4031e4b2-a128-11ef-b98f-36542ecc2075\",\n    \"owner\": null,\n    \"parentTaskId\": null,\n    \"priority\": 50,\n    \"processDefinitionId\": \"process-dmn:1:8b5fb8a9-a126-11ef-b98f-36542ecc2075\",\n    \"processInstanceId\": \"4031e4b2-a128-11ef-b98f-36542ecc2075\",\n    \"taskDefinitionKey\": \"purchase-policy\",\n    \"caseExecutionId\": null,\n    \"caseInstanceId\": null,\n    \"caseDefinitionId\": null,\n    \"suspended\": false,\n    \"formKey\": null,\n    \"camundaFormRef\": {\n      \"key\": \"purchase-policy\",\n      \"binding\": \"latest\",\n      \"version\": null\n    },\n    \"tenantId\": null,\n    \"taskState\": \"Updated\"\n  }\n]\n</code></pre> <ol> <li>Current assignee to the task. If the task was not claimed before, this value will be <code>null</code>.</li> </ol>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#complete","title":"Complete","text":"<p>Purchase Policy</p> <p>Request</p> <pre><code># Complete Task\nTASK_ID=3f29c546-a137-11ef-b98f-36542ecc2075\ncurl --location \"http://localhost:8080/engine-rest/task/$TASK_ID/complete\" \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"variables\": {\n    \"name\": {\n      \"value\": \"MyName\"\n    },\n    \"surname\": {\n      \"value\": \"MySurname\"\n    },\n    \"age\": {\n      \"value\": 24\n    },\n    \"currentDate\": {\n      \"value\": \"2024-11-20\"\n    },\n    \"type\": {\n      \"value\": \"CAR\"\n    }\n  }\n}' \\\n| jq .\n</code></pre> <p>Response</p> <p>N/A</p> <p>Approval Escalation</p> <p>Request</p> <pre><code># Complete Task\nTASK_ID=c22ce7f7-a190-11ef-b98f-36542ecc2075\ncurl --location \"http://localhost:8080/engine-rest/task/$TASK_ID/complete\" \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"variables\": {\n    \"approved\": {\n      \"value\": false\n    }\n  }\n}' \\\n| jq .\n</code></pre>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#submit-form","title":"Submit Form","text":"<p>Purchase Policy</p> <p>Request</p> <pre><code># Submit form\nTASK_ID=3f29c546-a137-11ef-b98f-36542ecc2075\ncurl --location \"http://localhost:8080/engine-rest/task/$TASK_ID/submit-form\" \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"variables\": {\n    \"name\": {\n      \"value\": \"MyName\"\n    },\n    \"surname\": {\n      \"value\": \"MySurname\"\n    },\n    \"age\": {\n      \"value\": 24\n    },\n    \"currentDate\": {\n      \"value\": \"2024-11-20\"\n    },\n    \"type\": {\n      \"value\": \"CAR\"\n    }\n  }\n}' \\\n| jq .\n</code></pre> <p>Response</p> <p>N/A</p> <p>Approval Escalation</p> <p>Request</p> <pre><code># Submit form\nTASK_ID=081da124-a136-11ef-b98f-36542ecc2075\ncurl --location \"http://localhost:8080/engine-rest/task/$TASK_ID/submit-form\" \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"variables\": {\n    \"approved\": {\n      \"value\": false\n    }\n  }\n}' \\\n| jq .\n</code></pre>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#get-task-variables","title":"Get Task Variables","text":"<p>Task Variables</p> <p>Request</p> <pre><code># Get Task Variables (forms)\nTASK_ID=308977e1-a191-11ef-b98f-36542ecc2075\ncurl --location \"http://localhost:8080/engine-rest/task/$TASK_ID/variables?deserializeValues=true\" \\\n--header 'Accept: application/json' \\\n| jq .\n</code></pre> <p>Response</p> <pre><code>{\n  \"result\": {\n    \"type\": \"Object\",\n    \"value\": {\n      \"result\": true,\n      \"risk\": \"MID\"\n    },\n    \"valueInfo\": {\n      \"objectTypeName\": \"java.util.HashMap\",\n      \"serializationDataFormat\": \"application/x-java-serialized-object\"\n    }\n  },\n  \"surname\": {\n    \"type\": \"String\",\n    \"value\": \"MySurname\",\n    \"valueInfo\": {}\n  },\n  \"name\": {\n    \"type\": \"String\",\n    \"value\": \"MyName\",\n    \"valueInfo\": {}\n  },\n  \"currentDate\": {\n    \"type\": \"String\",\n    \"value\": \"2024-11-20\",\n    \"valueInfo\": {}\n  },\n  \"type\": {\n    \"type\": \"String\",\n    \"value\": \"CAR\",\n    \"valueInfo\": {}\n  },\n  \"age\": {\n    \"type\": \"Integer\",\n    \"value\": 24,\n    \"valueInfo\": {}\n  }\n}\n</code></pre> <p>Form Variables</p> <p>Request</p> <pre><code># Get Task Variables (forms)\nTASK_ID=3dbe1f9a-a18f-11ef-b98f-36542ecc2075\ncurl --location \"http://localhost:8080/engine-rest/task/$TASK_ID/form-variables?deserializeValues=true\" \\\n--header 'Accept: application/json' \\\n| jq .\n</code></pre> <p>Response</p> <pre><code>{\n  \"result\": {\n    \"type\": \"Object\",\n    \"value\": {\n      \"result\": true,\n      \"risk\": \"MID\"\n    },\n    \"valueInfo\": {\n      \"objectTypeName\": \"java.util.HashMap\",\n      \"serializationDataFormat\": \"application/x-java-serialized-object\"\n    }\n  },\n  \"surname\": {\n    \"type\": \"String\",\n    \"value\": \"MySurname\",\n    \"valueInfo\": {}\n  },\n  \"name\": {\n    \"type\": \"String\",\n    \"value\": \"MyName\",\n    \"valueInfo\": {}\n  },\n  \"currentDate\": {\n    \"type\": \"String\",\n    \"value\": \"2024-11-20\",\n    \"valueInfo\": {}\n  },\n  \"type\": {\n    \"type\": \"String\",\n    \"value\": \"CAR\",\n    \"valueInfo\": {}\n  },\n  \"age\": {\n    \"type\": \"Integer\",\n    \"value\": 24,\n    \"valueInfo\": {}\n  }\n}\n</code></pre>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#get-deployed-form","title":"Get Deployed Form","text":"<p>Request</p> <pre><code># Get Deployed Form by task id\nTASK_ID=3dbe1f9a-a18f-11ef-b98f-36542ecc2075\ncurl --location \"http://localhost:8080/engine-rest/task/$TASK_ID/deployed-form\" \\\n--header 'Accept: application/xhtml+xml' \\\n| jq .\n</code></pre> <p>Response</p> <pre><code>{\n  \"components\": [\n    {\n      \"label\": \"Approve\",\n      \"type\": \"checkbox\",\n      \"layout\": {\n        \"row\": \"Row_0a5rbmx\",\n        \"columns\": null\n      },\n      \"id\": \"Field_1eatpg7\",\n      \"key\": \"approved\"\n    }\n  ],\n  \"type\": \"default\",\n  \"id\": \"approval\",\n  \"exporter\": {\n    \"name\": \"Camunda Modeler\",\n    \"version\": \"5.28.0\"\n  },\n  \"executionPlatform\": \"Camunda Platform\",\n  \"executionPlatformVersion\": \"7.22.0\",\n  \"schemaVersion\": 16\n}\n</code></pre>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#historical","title":"Historical","text":"","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#process-instances","title":"Process Instances","text":"<p>Request</p> <pre><code># Historical Process Instances\nPROCESS_KEY=process-dmn\ncurl --location 'http://localhost:8080/engine-rest/history/process-instance?firstResult=0&amp;maxResults=50' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n    \"processDefinitionKey\": \"'\"$PROCESS_KEY\"'\"\n}' \\\n| jq .\n</code></pre> <p>Response</p> <pre><code>[\n  {\n    \"id\": \"24ad1fd7-a191-11ef-b98f-36542ecc2075\",\n    \"businessKey\": \"1234\",\n    \"processDefinitionId\": \"process-dmn:1:8b5fb8a9-a126-11ef-b98f-36542ecc2075\",\n    \"processDefinitionKey\": \"process-dmn\",\n    \"processDefinitionName\": \"Process DMN\",\n    \"processDefinitionVersion\": 1,\n    \"startTime\": \"2024-11-13T08:30:22.943+0100\",\n    \"endTime\": null,\n    \"removalTime\": null,\n    \"durationInMillis\": null,\n    \"startUserId\": \"admin\",\n    \"startActivityId\": \"StartEvent_1\",\n    \"deleteReason\": null,\n    \"rootProcessInstanceId\": \"24ad1fd7-a191-11ef-b98f-36542ecc2075\",\n    \"superProcessInstanceId\": null,\n    \"superCaseInstanceId\": null,\n    \"caseInstanceId\": null,\n    \"tenantId\": null,\n    \"state\": \"ACTIVE\",\n    \"restartedProcessInstanceId\": null\n  },\n  // more historical data\n]\n</code></pre>","tags":["Workflow Engine","DMN","Camunda"]},{"location":"getting-started/workflow-run/#tasks","title":"Tasks","text":"<p>Request</p> <pre><code># Get task by id. You can filter processed by candidate groups, candidate users, business key, etc..\nBUSINESS_KEY=1234\ncurl --location 'http://localhost:8080/engine-rest/history/task?firstResult=0&amp;maxResults=50' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"processInstanceBusinessKey\": \"'\"$BUSINESS_KEY\"'\"\n}' \\\n| jq .\n</code></pre> <p>Response</p> <pre><code>[\n  {\n    \"id\": \"f2c092fa-a135-11ef-b98f-36542ecc2075\",\n    \"processDefinitionKey\": \"process-dmn\",\n    \"processDefinitionId\": \"process-dmn:1:8b5fb8a9-a126-11ef-b98f-36542ecc2075\",\n    \"processInstanceId\": \"c3adcab0-a135-11ef-b98f-36542ecc2075\",\n    \"executionId\": \"f2c06be6-a135-11ef-b98f-36542ecc2075\",\n    \"caseDefinitionKey\": null,\n    \"caseDefinitionId\": null,\n    \"caseInstanceId\": null,\n    \"caseExecutionId\": null,\n    \"activityInstanceId\": \"policy-approval:f2c06be7-a135-11ef-b98f-36542ecc2075\",\n    \"name\": \"Approval\",\n    \"description\": null,\n    \"deleteReason\": \"deleted\",\n    \"owner\": null,\n    \"assignee\": null,\n    \"startTime\": \"2024-11-12T21:37:34.982+0100\",\n    \"endTime\": \"2024-11-12T21:38:10.818+0100\",\n    \"duration\": 35836,\n    \"taskDefinitionKey\": \"policy-approval\",\n    \"priority\": 50,\n    \"due\": null,\n    \"parentTaskId\": null,\n    \"followUp\": null,\n    \"tenantId\": null,\n    \"removalTime\": \"2025-05-11T21:39:22.032+0200\",\n    \"rootProcessInstanceId\": \"c3adcab0-a135-11ef-b98f-36542ecc2075\",\n    \"taskState\": \"Deleted\"\n  },\n  // more historical data\n]\n</code></pre>","tags":["Workflow Engine","DMN","Camunda"]}]}